/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator;

import com.google.common.collect.Iterators;
import dk.sdu.mmmi.mdsd.math.Binding;
import dk.sdu.mmmi.mdsd.math.Div;
import dk.sdu.mmmi.mdsd.math.ExternalDef;
import dk.sdu.mmmi.mdsd.math.Function;
import dk.sdu.mmmi.mdsd.math.LetBinding;
import dk.sdu.mmmi.mdsd.math.MathExp;
import dk.sdu.mmmi.mdsd.math.MathNumber;
import dk.sdu.mmmi.mdsd.math.Minus;
import dk.sdu.mmmi.mdsd.math.Mult;
import dk.sdu.mmmi.mdsd.math.Parenthesis;
import dk.sdu.mmmi.mdsd.math.PiUse;
import dk.sdu.mmmi.mdsd.math.Plus;
import dk.sdu.mmmi.mdsd.math.PowerUse;
import dk.sdu.mmmi.mdsd.math.Program;
import dk.sdu.mmmi.mdsd.math.SqrtUse;
import dk.sdu.mmmi.mdsd.math.VarBinding;
import dk.sdu.mmmi.mdsd.math.VariableUse;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathGenerator extends AbstractGenerator {
  private static Map<String, String> variables;
  
  private static Map<String, String> externals;
  
  private static boolean hasExternals;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Program program = Iterators.<Program>filter(resource.getAllContents(), Program.class).next();
    final MathExp math = Iterators.<MathExp>filter(resource.getAllContents(), MathExp.class).next();
    final ExternalDef ext = Iterators.<ExternalDef>filter(resource.getAllContents(), ExternalDef.class).next();
    boolean _isEmpty = MathGenerator.compute(math, ext).isEmpty();
    boolean _not = (!_isEmpty);
    MathGenerator.hasExternals = _not;
    final String name = MathGenerator.getProgramName(program);
    fsa.generateFile((("/math_expression/" + name) + ".java"), MathGenerator.compile(name));
  }
  
  public static String getProgramName(final Program p) {
    return p.getName();
  }
  
  public static Map<String, String> compute(final MathExp math, final ExternalDef ext) {
    LinkedHashMap<String, String> _linkedHashMap = new LinkedHashMap<String, String>();
    MathGenerator.variables = _linkedHashMap;
    EList<VarBinding> _variables = math.getVariables();
    for (final VarBinding varBinding : _variables) {
      MathGenerator.computeExpression(varBinding);
    }
    LinkedHashMap<String, String> _linkedHashMap_1 = new LinkedHashMap<String, String>();
    MathGenerator.externals = _linkedHashMap_1;
    EList<Function> _functions = ext.getFunctions();
    for (final Function f : _functions) {
      MathGenerator.computeExternals(f.getF());
    }
    return MathGenerator.externals;
  }
  
  public static String computeExternals(final String function) {
    String _xifexpression = null;
    boolean _containsKey = MathGenerator.externals.containsKey(function);
    boolean _not = (!_containsKey);
    if (_not) {
      String _switchResult = null;
      if (function != null) {
        switch (function) {
          case "pi":
            _switchResult = MathGenerator.externals.put(function, "()");
            break;
          case "sqrt":
            _switchResult = MathGenerator.externals.put(function, "(int n)");
            break;
          case "pow":
            _switchResult = MathGenerator.externals.put(function, "(int n, int m)");
            break;
        }
      }
      _xifexpression = _switchResult;
    }
    return _xifexpression;
  }
  
  protected static String _computeExpression(final VarBinding binding) {
    MathGenerator.variables.put(binding.getName(), MathGenerator.computeExpression(binding.getExpression()));
    return MathGenerator.variables.get(binding.getName());
  }
  
  protected static String _computeExpression(final MathNumber exp) {
    return Integer.valueOf(exp.getValue()).toString();
  }
  
  protected static String _computeExpression(final Parenthesis exp) {
    String _computeExpression = MathGenerator.computeExpression(exp.getExp());
    String _plus = ("(" + _computeExpression);
    return (_plus + ")");
  }
  
  protected static String _computeExpression(final SqrtUse exp) {
    String _computeExpression = MathGenerator.computeExpression(exp.getExp());
    String _plus = ("this.external.sqrt(" + _computeExpression);
    return (_plus + ")");
  }
  
  protected static String _computeExpression(final PowerUse exp) {
    String _computeExpression = MathGenerator.computeExpression(exp.getFirst());
    String _plus = ("this.external.pow(" + _computeExpression);
    String _plus_1 = (_plus + ", ");
    String _computeExpression_1 = MathGenerator.computeExpression(exp.getSecond());
    String _plus_2 = (_plus_1 + _computeExpression_1);
    return (_plus_2 + ")");
  }
  
  protected static String _computeExpression(final PiUse exp) {
    return "this.external.pi()";
  }
  
  protected static String _computeExpression(final Plus exp) {
    String _computeExpression = MathGenerator.computeExpression(exp.getLeft());
    String _plus = (_computeExpression + " + ");
    String _computeExpression_1 = MathGenerator.computeExpression(exp.getRight());
    return (_plus + _computeExpression_1);
  }
  
  protected static String _computeExpression(final Minus exp) {
    String _computeExpression = MathGenerator.computeExpression(exp.getLeft());
    String _plus = (_computeExpression + " - ");
    String _computeExpression_1 = MathGenerator.computeExpression(exp.getRight());
    return (_plus + _computeExpression_1);
  }
  
  protected static String _computeExpression(final Mult exp) {
    String _computeExpression = MathGenerator.computeExpression(exp.getLeft());
    String _plus = (_computeExpression + " * ");
    String _computeExpression_1 = MathGenerator.computeExpression(exp.getRight());
    return (_plus + _computeExpression_1);
  }
  
  protected static String _computeExpression(final Div exp) {
    String _computeExpression = MathGenerator.computeExpression(exp.getLeft());
    String _plus = (_computeExpression + " / ");
    String _computeExpression_1 = MathGenerator.computeExpression(exp.getRight());
    return (_plus + _computeExpression_1);
  }
  
  protected static String _computeExpression(final LetBinding exp) {
    return MathGenerator.computeExpression(exp.getBody());
  }
  
  protected static String _computeExpression(final VariableUse exp) {
    String _computeBinding = MathGenerator.computeBinding(exp.getRef());
    String _plus = ("(" + _computeBinding);
    return (_plus + ")");
  }
  
  protected static String _computeBinding(final VarBinding binding) {
    String _xblockexpression = null;
    {
      boolean _containsKey = MathGenerator.variables.containsKey(binding.getName());
      boolean _not = (!_containsKey);
      if (_not) {
        MathGenerator.computeExpression(binding);
      }
      _xblockexpression = binding.getName();
    }
    return _xblockexpression;
  }
  
  protected static String _computeBinding(final LetBinding binding) {
    return MathGenerator.computeExpression(binding.getBinding());
  }
  
  public static CharSequence compile(final String progname) {
    CharSequence _xblockexpression = null;
    {
      ArrayList<Map.Entry<String, String>> _xifexpression = null;
      if ((MathGenerator.variables != null)) {
        Set<Map.Entry<String, String>> _entrySet = MathGenerator.variables.entrySet();
        _xifexpression = new ArrayList<Map.Entry<String, String>>(_entrySet);
      } else {
        _xifexpression = new ArrayList<Map.Entry<String, String>>();
      }
      ArrayList<Map.Entry<String, String>> varList = _xifexpression;
      ArrayList<Map.Entry<String, String>> _xifexpression_1 = null;
      if ((MathGenerator.externals != null)) {
        Set<Map.Entry<String, String>> _entrySet_1 = MathGenerator.externals.entrySet();
        _xifexpression_1 = new ArrayList<Map.Entry<String, String>>(_entrySet_1);
      } else {
        _xifexpression_1 = new ArrayList<Map.Entry<String, String>>();
      }
      ArrayList<Map.Entry<String, String>> extList = _xifexpression_1;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package math_expression;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("public class ");
      _builder.append(progname);
      _builder.append("{");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      {
        for(final Map.Entry<String, String> v : varList) {
          _builder.append("\t");
          _builder.append("public int ");
          String _key = v.getKey();
          _builder.append(_key, "\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("\t");
      _builder.newLine();
      {
        if (MathGenerator.hasExternals) {
          _builder.append("\t");
          _builder.append("private External external;");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("public ");
          _builder.append(progname, "\t");
          _builder.append("(External external){");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("\t");
          _builder.append("this.external = external;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
        }
      }
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public void compute(){");
      _builder.newLine();
      {
        for(final Map.Entry<String, String> v_1 : varList) {
          _builder.append("\t\t");
          String _key_1 = v_1.getKey();
          _builder.append(_key_1, "\t\t");
          _builder.append(" = ");
          String _value = v_1.getValue();
          _builder.append(_value, "\t\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      {
        if (MathGenerator.hasExternals) {
          _builder.append("\t");
          _builder.append("public interface External{");
          _builder.newLine();
          {
            for(final Map.Entry<String, String> e : extList) {
              _builder.append("\t");
              _builder.append("\t");
              _builder.append("public int ");
              String _key_2 = e.getKey();
              _builder.append(_key_2, "\t\t");
              String _value_1 = e.getValue();
              _builder.append(_value_1, "\t\t");
              _builder.append(";");
              _builder.newLineIfNotEmpty();
            }
          }
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
        }
      }
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public static String computeExpression(final EObject exp) {
    if (exp instanceof PiUse) {
      return _computeExpression((PiUse)exp);
    } else if (exp instanceof PowerUse) {
      return _computeExpression((PowerUse)exp);
    } else if (exp instanceof SqrtUse) {
      return _computeExpression((SqrtUse)exp);
    } else if (exp instanceof Div) {
      return _computeExpression((Div)exp);
    } else if (exp instanceof LetBinding) {
      return _computeExpression((LetBinding)exp);
    } else if (exp instanceof MathNumber) {
      return _computeExpression((MathNumber)exp);
    } else if (exp instanceof Minus) {
      return _computeExpression((Minus)exp);
    } else if (exp instanceof Mult) {
      return _computeExpression((Mult)exp);
    } else if (exp instanceof Parenthesis) {
      return _computeExpression((Parenthesis)exp);
    } else if (exp instanceof Plus) {
      return _computeExpression((Plus)exp);
    } else if (exp instanceof VarBinding) {
      return _computeExpression((VarBinding)exp);
    } else if (exp instanceof VariableUse) {
      return _computeExpression((VariableUse)exp);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(exp).toString());
    }
  }
  
  public static String computeBinding(final Binding binding) {
    if (binding instanceof LetBinding) {
      return _computeBinding((LetBinding)binding);
    } else if (binding instanceof VarBinding) {
      return _computeBinding((VarBinding)binding);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(binding).toString());
    }
  }
}
